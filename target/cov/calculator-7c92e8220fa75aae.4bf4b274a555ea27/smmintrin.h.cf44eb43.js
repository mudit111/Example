var data = {lines:[
{"lineNum":"    1","line":"/* Copyright (C) 2007-2015 Free Software Foundation, Inc."},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"   This file is part of GCC."},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"   GCC is free software; you can redistribute it and/or modify"},
{"lineNum":"    6","line":"   it under the terms of the GNU General Public License as published by"},
{"lineNum":"    7","line":"   the Free Software Foundation; either version 3, or (at your option)"},
{"lineNum":"    8","line":"   any later version."},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"   GCC is distributed in the hope that it will be useful,"},
{"lineNum":"   11","line":"   but WITHOUT ANY WARRANTY; without even the implied warranty of"},
{"lineNum":"   12","line":"   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the"},
{"lineNum":"   13","line":"   GNU General Public License for more details."},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"   Under Section 7 of GPL version 3, you are granted additional"},
{"lineNum":"   16","line":"   permissions described in the GCC Runtime Library Exception, version"},
{"lineNum":"   17","line":"   3.1, as published by the Free Software Foundation."},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"   You should have received a copy of the GNU General Public License and"},
{"lineNum":"   20","line":"   a copy of the GCC Runtime Library Exception along with this program;"},
{"lineNum":"   21","line":"   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see"},
{"lineNum":"   22","line":"   <http://www.gnu.org/licenses/>.  */"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"/* Implemented from the specification included in the Intel C++ Compiler"},
{"lineNum":"   25","line":"   User Guide and Reference, version 10.0.  */"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"#ifndef _SMMINTRIN_H_INCLUDED"},
{"lineNum":"   28","line":"#define _SMMINTRIN_H_INCLUDED"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"/* We need definitions from the SSSE3, SSE3, SSE2 and SSE header"},
{"lineNum":"   31","line":"   files.  */"},
{"lineNum":"   32","line":"#include <tmmintrin.h>"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"#ifndef __SSE4_1__"},
{"lineNum":"   35","line":"#pragma GCC push_options"},
{"lineNum":"   36","line":"#pragma GCC target(\"sse4.1\")"},
{"lineNum":"   37","line":"#define __DISABLE_SSE4_1__"},
{"lineNum":"   38","line":"#endif /* __SSE4_1__ */"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"/* Rounding mode macros. */"},
{"lineNum":"   41","line":"#define _MM_FROUND_TO_NEAREST_INT\t0x00"},
{"lineNum":"   42","line":"#define _MM_FROUND_TO_NEG_INF\t\t0x01"},
{"lineNum":"   43","line":"#define _MM_FROUND_TO_POS_INF\t\t0x02"},
{"lineNum":"   44","line":"#define _MM_FROUND_TO_ZERO\t\t0x03"},
{"lineNum":"   45","line":"#define _MM_FROUND_CUR_DIRECTION\t0x04"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"#define _MM_FROUND_RAISE_EXC\t\t0x00"},
{"lineNum":"   48","line":"#define _MM_FROUND_NO_EXC\t\t0x08"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"#define _MM_FROUND_NINT\t\t\\"},
{"lineNum":"   51","line":"  (_MM_FROUND_TO_NEAREST_INT | _MM_FROUND_RAISE_EXC)"},
{"lineNum":"   52","line":"#define _MM_FROUND_FLOOR\t\\"},
{"lineNum":"   53","line":"  (_MM_FROUND_TO_NEG_INF | _MM_FROUND_RAISE_EXC)"},
{"lineNum":"   54","line":"#define _MM_FROUND_CEIL\t\t\\"},
{"lineNum":"   55","line":"  (_MM_FROUND_TO_POS_INF | _MM_FROUND_RAISE_EXC)"},
{"lineNum":"   56","line":"#define _MM_FROUND_TRUNC\t\\"},
{"lineNum":"   57","line":"  (_MM_FROUND_TO_ZERO | _MM_FROUND_RAISE_EXC)"},
{"lineNum":"   58","line":"#define _MM_FROUND_RINT\t\t\\"},
{"lineNum":"   59","line":"  (_MM_FROUND_CUR_DIRECTION | _MM_FROUND_RAISE_EXC)"},
{"lineNum":"   60","line":"#define _MM_FROUND_NEARBYINT\t\\"},
{"lineNum":"   61","line":"  (_MM_FROUND_CUR_DIRECTION | _MM_FROUND_NO_EXC)"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"/* Test Instruction */"},
{"lineNum":"   64","line":"/* Packed integer 128-bit bitwise comparison. Return 1 if"},
{"lineNum":"   65","line":"   (__V & __M) == 0.  */"},
{"lineNum":"   66","line":"extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"   67","line":"_mm_testz_si128 (__m128i __M, __m128i __V)"},
{"lineNum":"   68","line":"{"},
{"lineNum":"   69","line":"  return __builtin_ia32_ptestz128 ((__v2di)__M, (__v2di)__V);"},
{"lineNum":"   70","line":"}"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"/* Packed integer 128-bit bitwise comparison. Return 1 if"},
{"lineNum":"   73","line":"   (__V & ~__M) == 0.  */"},
{"lineNum":"   74","line":"extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"   75","line":"_mm_testc_si128 (__m128i __M, __m128i __V)"},
{"lineNum":"   76","line":"{"},
{"lineNum":"   77","line":"  return __builtin_ia32_ptestc128 ((__v2di)__M, (__v2di)__V);"},
{"lineNum":"   78","line":"}"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"/* Packed integer 128-bit bitwise comparison. Return 1 if"},
{"lineNum":"   81","line":"   (__V & __M) != 0 && (__V & ~__M) != 0.  */"},
{"lineNum":"   82","line":"extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"   83","line":"_mm_testnzc_si128 (__m128i __M, __m128i __V)"},
{"lineNum":"   84","line":"{"},
{"lineNum":"   85","line":"  return __builtin_ia32_ptestnzc128 ((__v2di)__M, (__v2di)__V);"},
{"lineNum":"   86","line":"}"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"/* Macros for packed integer 128-bit comparison intrinsics.  */"},
{"lineNum":"   89","line":"#define _mm_test_all_zeros(M, V) _mm_testz_si128 ((M), (V))"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"#define _mm_test_all_ones(V) \\"},
{"lineNum":"   92","line":"  _mm_testc_si128 ((V), _mm_cmpeq_epi32 ((V), (V)))"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"#define _mm_test_mix_ones_zeros(M, V) _mm_testnzc_si128 ((M), (V))"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"/* Packed/scalar double precision floating point rounding.  */"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"#ifdef __OPTIMIZE__"},
{"lineNum":"   99","line":"extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  100","line":"_mm_round_pd (__m128d __V, const int __M)"},
{"lineNum":"  101","line":"{"},
{"lineNum":"  102","line":"  return (__m128d) __builtin_ia32_roundpd ((__v2df)__V, __M);"},
{"lineNum":"  103","line":"}"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  106","line":"_mm_round_sd(__m128d __D, __m128d __V, const int __M)"},
{"lineNum":"  107","line":"{"},
{"lineNum":"  108","line":"  return (__m128d) __builtin_ia32_roundsd ((__v2df)__D,"},
{"lineNum":"  109","line":"\t\t\t\t\t   (__v2df)__V,"},
{"lineNum":"  110","line":"\t\t\t\t\t   __M);"},
{"lineNum":"  111","line":"}"},
{"lineNum":"  112","line":"#else"},
{"lineNum":"  113","line":"#define _mm_round_pd(V, M) \\"},
{"lineNum":"  114","line":"  ((__m128d) __builtin_ia32_roundpd ((__v2df)(__m128d)(V), (int)(M)))"},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"#define _mm_round_sd(D, V, M)\t\t\t\t\t\t\\"},
{"lineNum":"  117","line":"  ((__m128d) __builtin_ia32_roundsd ((__v2df)(__m128d)(D),\t\t\\"},
{"lineNum":"  118","line":"\t\t\t\t     (__v2df)(__m128d)(V), (int)(M)))"},
{"lineNum":"  119","line":"#endif"},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"/* Packed/scalar single precision floating point rounding.  */"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"#ifdef __OPTIMIZE__"},
{"lineNum":"  124","line":"extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  125","line":"_mm_round_ps (__m128 __V, const int __M)"},
{"lineNum":"  126","line":"{"},
{"lineNum":"  127","line":"  return (__m128) __builtin_ia32_roundps ((__v4sf)__V, __M);"},
{"lineNum":"  128","line":"}"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  131","line":"_mm_round_ss (__m128 __D, __m128 __V, const int __M)"},
{"lineNum":"  132","line":"{"},
{"lineNum":"  133","line":"  return (__m128) __builtin_ia32_roundss ((__v4sf)__D,"},
{"lineNum":"  134","line":"\t\t\t\t\t  (__v4sf)__V,"},
{"lineNum":"  135","line":"\t\t\t\t\t  __M);"},
{"lineNum":"  136","line":"}"},
{"lineNum":"  137","line":"#else"},
{"lineNum":"  138","line":"#define _mm_round_ps(V, M) \\"},
{"lineNum":"  139","line":"  ((__m128) __builtin_ia32_roundps ((__v4sf)(__m128)(V), (int)(M)))"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"#define _mm_round_ss(D, V, M)\t\t\t\t\t\t\\"},
{"lineNum":"  142","line":"  ((__m128) __builtin_ia32_roundss ((__v4sf)(__m128)(D),\t\t\\"},
{"lineNum":"  143","line":"\t\t\t\t    (__v4sf)(__m128)(V), (int)(M)))"},
{"lineNum":"  144","line":"#endif"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"/* Macros for ceil/floor intrinsics.  */"},
{"lineNum":"  147","line":"#define _mm_ceil_pd(V)\t   _mm_round_pd ((V), _MM_FROUND_CEIL)"},
{"lineNum":"  148","line":"#define _mm_ceil_sd(D, V)  _mm_round_sd ((D), (V), _MM_FROUND_CEIL)"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"#define _mm_floor_pd(V)\t   _mm_round_pd((V), _MM_FROUND_FLOOR)"},
{"lineNum":"  151","line":"#define _mm_floor_sd(D, V) _mm_round_sd ((D), (V), _MM_FROUND_FLOOR)"},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"#define _mm_ceil_ps(V)\t   _mm_round_ps ((V), _MM_FROUND_CEIL)"},
{"lineNum":"  154","line":"#define _mm_ceil_ss(D, V)  _mm_round_ss ((D), (V), _MM_FROUND_CEIL)"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"#define _mm_floor_ps(V)\t   _mm_round_ps ((V), _MM_FROUND_FLOOR)"},
{"lineNum":"  157","line":"#define _mm_floor_ss(D, V) _mm_round_ss ((D), (V), _MM_FROUND_FLOOR)"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"/* SSE4.1 */"},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"/* Integer blend instructions - select data from 2 sources using"},
{"lineNum":"  162","line":"   constant/variable mask.  */"},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"#ifdef __OPTIMIZE__"},
{"lineNum":"  165","line":"extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  166","line":"_mm_blend_epi16 (__m128i __X, __m128i __Y, const int __M)"},
{"lineNum":"  167","line":"{"},
{"lineNum":"  168","line":"  return (__m128i) __builtin_ia32_pblendw128 ((__v8hi)__X,"},
{"lineNum":"  169","line":"\t\t\t\t\t      (__v8hi)__Y,"},
{"lineNum":"  170","line":"\t\t\t\t\t      __M);"},
{"lineNum":"  171","line":"}"},
{"lineNum":"  172","line":"#else"},
{"lineNum":"  173","line":"#define _mm_blend_epi16(X, Y, M)\t\t\t\t\t\\"},
{"lineNum":"  174","line":"  ((__m128i) __builtin_ia32_pblendw128 ((__v8hi)(__m128i)(X),\t\t\\"},
{"lineNum":"  175","line":"\t\t\t\t\t(__v8hi)(__m128i)(Y), (int)(M)))"},
{"lineNum":"  176","line":"#endif"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  179","line":"_mm_blendv_epi8 (__m128i __X, __m128i __Y, __m128i __M)"},
{"lineNum":"  180","line":"{"},
{"lineNum":"  181","line":"  return (__m128i) __builtin_ia32_pblendvb128 ((__v16qi)__X,"},
{"lineNum":"  182","line":"\t\t\t\t\t       (__v16qi)__Y,"},
{"lineNum":"  183","line":"\t\t\t\t\t       (__v16qi)__M);"},
{"lineNum":"  184","line":"}"},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"/* Single precision floating point blend instructions - select data"},
{"lineNum":"  187","line":"   from 2 sources using constant/variable mask.  */"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"#ifdef __OPTIMIZE__"},
{"lineNum":"  190","line":"extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  191","line":"_mm_blend_ps (__m128 __X, __m128 __Y, const int __M)"},
{"lineNum":"  192","line":"{"},
{"lineNum":"  193","line":"  return (__m128) __builtin_ia32_blendps ((__v4sf)__X,"},
{"lineNum":"  194","line":"\t\t\t\t\t  (__v4sf)__Y,"},
{"lineNum":"  195","line":"\t\t\t\t\t  __M);"},
{"lineNum":"  196","line":"}"},
{"lineNum":"  197","line":"#else"},
{"lineNum":"  198","line":"#define _mm_blend_ps(X, Y, M)\t\t\t\t\t\t\\"},
{"lineNum":"  199","line":"  ((__m128) __builtin_ia32_blendps ((__v4sf)(__m128)(X),\t\t\\"},
{"lineNum":"  200","line":"\t\t\t\t    (__v4sf)(__m128)(Y), (int)(M)))"},
{"lineNum":"  201","line":"#endif"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  204","line":"_mm_blendv_ps (__m128 __X, __m128 __Y, __m128 __M)"},
{"lineNum":"  205","line":"{"},
{"lineNum":"  206","line":"  return (__m128) __builtin_ia32_blendvps ((__v4sf)__X,"},
{"lineNum":"  207","line":"\t\t\t\t\t   (__v4sf)__Y,"},
{"lineNum":"  208","line":"\t\t\t\t\t   (__v4sf)__M);"},
{"lineNum":"  209","line":"}"},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"/* Double precision floating point blend instructions - select data"},
{"lineNum":"  212","line":"   from 2 sources using constant/variable mask.  */"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"#ifdef __OPTIMIZE__"},
{"lineNum":"  215","line":"extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  216","line":"_mm_blend_pd (__m128d __X, __m128d __Y, const int __M)"},
{"lineNum":"  217","line":"{"},
{"lineNum":"  218","line":"  return (__m128d) __builtin_ia32_blendpd ((__v2df)__X,"},
{"lineNum":"  219","line":"\t\t\t\t\t   (__v2df)__Y,"},
{"lineNum":"  220","line":"\t\t\t\t\t   __M);"},
{"lineNum":"  221","line":"}"},
{"lineNum":"  222","line":"#else"},
{"lineNum":"  223","line":"#define _mm_blend_pd(X, Y, M)\t\t\t\t\t\t\\"},
{"lineNum":"  224","line":"  ((__m128d) __builtin_ia32_blendpd ((__v2df)(__m128d)(X),\t\t\\"},
{"lineNum":"  225","line":"\t\t\t\t     (__v2df)(__m128d)(Y), (int)(M)))"},
{"lineNum":"  226","line":"#endif"},
{"lineNum":"  227","line":""},
{"lineNum":"  228","line":"extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  229","line":"_mm_blendv_pd (__m128d __X, __m128d __Y, __m128d __M)"},
{"lineNum":"  230","line":"{"},
{"lineNum":"  231","line":"  return (__m128d) __builtin_ia32_blendvpd ((__v2df)__X,"},
{"lineNum":"  232","line":"\t\t\t\t\t    (__v2df)__Y,"},
{"lineNum":"  233","line":"\t\t\t\t\t    (__v2df)__M);"},
{"lineNum":"  234","line":"}"},
{"lineNum":"  235","line":""},
{"lineNum":"  236","line":"/* Dot product instructions with mask-defined summing and zeroing parts"},
{"lineNum":"  237","line":"   of result.  */"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"#ifdef __OPTIMIZE__"},
{"lineNum":"  240","line":"extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  241","line":"_mm_dp_ps (__m128 __X, __m128 __Y, const int __M)"},
{"lineNum":"  242","line":"{"},
{"lineNum":"  243","line":"  return (__m128) __builtin_ia32_dpps ((__v4sf)__X,"},
{"lineNum":"  244","line":"\t\t\t\t       (__v4sf)__Y,"},
{"lineNum":"  245","line":"\t\t\t\t       __M);"},
{"lineNum":"  246","line":"}"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  249","line":"_mm_dp_pd (__m128d __X, __m128d __Y, const int __M)"},
{"lineNum":"  250","line":"{"},
{"lineNum":"  251","line":"  return (__m128d) __builtin_ia32_dppd ((__v2df)__X,"},
{"lineNum":"  252","line":"\t\t\t\t\t(__v2df)__Y,"},
{"lineNum":"  253","line":"\t\t\t\t\t__M);"},
{"lineNum":"  254","line":"}"},
{"lineNum":"  255","line":"#else"},
{"lineNum":"  256","line":"#define _mm_dp_ps(X, Y, M)\t\t\t\t\t\t\\"},
{"lineNum":"  257","line":"  ((__m128) __builtin_ia32_dpps ((__v4sf)(__m128)(X),\t\t\t\\"},
{"lineNum":"  258","line":"\t\t\t\t (__v4sf)(__m128)(Y), (int)(M)))"},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"#define _mm_dp_pd(X, Y, M)\t\t\t\t\t\t\\"},
{"lineNum":"  261","line":"  ((__m128d) __builtin_ia32_dppd ((__v2df)(__m128d)(X),\t\t\t\\"},
{"lineNum":"  262","line":"\t\t\t\t  (__v2df)(__m128d)(Y), (int)(M)))"},
{"lineNum":"  263","line":"#endif"},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"/* Packed integer 64-bit comparison, zeroing or filling with ones"},
{"lineNum":"  266","line":"   corresponding parts of result.  */"},
{"lineNum":"  267","line":"extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  268","line":"_mm_cmpeq_epi64 (__m128i __X, __m128i __Y)"},
{"lineNum":"  269","line":"{"},
{"lineNum":"  270","line":"  return (__m128i) ((__v2di)__X == (__v2di)__Y);"},
{"lineNum":"  271","line":"}"},
{"lineNum":"  272","line":""},
{"lineNum":"  273","line":"/*  Min/max packed integer instructions.  */"},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  276","line":"_mm_min_epi8 (__m128i __X, __m128i __Y)"},
{"lineNum":"  277","line":"{"},
{"lineNum":"  278","line":"  return (__m128i) __builtin_ia32_pminsb128 ((__v16qi)__X, (__v16qi)__Y);"},
{"lineNum":"  279","line":"}"},
{"lineNum":"  280","line":""},
{"lineNum":"  281","line":"extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  282","line":"_mm_max_epi8 (__m128i __X, __m128i __Y)"},
{"lineNum":"  283","line":"{"},
{"lineNum":"  284","line":"  return (__m128i) __builtin_ia32_pmaxsb128 ((__v16qi)__X, (__v16qi)__Y);"},
{"lineNum":"  285","line":"}"},
{"lineNum":"  286","line":""},
{"lineNum":"  287","line":"extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  288","line":"_mm_min_epu16 (__m128i __X, __m128i __Y)"},
{"lineNum":"  289","line":"{"},
{"lineNum":"  290","line":"  return (__m128i) __builtin_ia32_pminuw128 ((__v8hi)__X, (__v8hi)__Y);"},
{"lineNum":"  291","line":"}"},
{"lineNum":"  292","line":""},
{"lineNum":"  293","line":"extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  294","line":"_mm_max_epu16 (__m128i __X, __m128i __Y)"},
{"lineNum":"  295","line":"{"},
{"lineNum":"  296","line":"  return (__m128i) __builtin_ia32_pmaxuw128 ((__v8hi)__X, (__v8hi)__Y);"},
{"lineNum":"  297","line":"}"},
{"lineNum":"  298","line":""},
{"lineNum":"  299","line":"extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  300","line":"_mm_min_epi32 (__m128i __X, __m128i __Y)"},
{"lineNum":"  301","line":"{"},
{"lineNum":"  302","line":"  return (__m128i) __builtin_ia32_pminsd128 ((__v4si)__X, (__v4si)__Y);"},
{"lineNum":"  303","line":"}"},
{"lineNum":"  304","line":""},
{"lineNum":"  305","line":"extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  306","line":"_mm_max_epi32 (__m128i __X, __m128i __Y)"},
{"lineNum":"  307","line":"{"},
{"lineNum":"  308","line":"  return (__m128i) __builtin_ia32_pmaxsd128 ((__v4si)__X, (__v4si)__Y);"},
{"lineNum":"  309","line":"}"},
{"lineNum":"  310","line":""},
{"lineNum":"  311","line":"extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  312","line":"_mm_min_epu32 (__m128i __X, __m128i __Y)"},
{"lineNum":"  313","line":"{"},
{"lineNum":"  314","line":"  return (__m128i) __builtin_ia32_pminud128 ((__v4si)__X, (__v4si)__Y);"},
{"lineNum":"  315","line":"}"},
{"lineNum":"  316","line":""},
{"lineNum":"  317","line":"extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  318","line":"_mm_max_epu32 (__m128i __X, __m128i __Y)"},
{"lineNum":"  319","line":"{"},
{"lineNum":"  320","line":"  return (__m128i) __builtin_ia32_pmaxud128 ((__v4si)__X, (__v4si)__Y);"},
{"lineNum":"  321","line":"}"},
{"lineNum":"  322","line":""},
{"lineNum":"  323","line":"/* Packed integer 32-bit multiplication with truncation of upper"},
{"lineNum":"  324","line":"   halves of results.  */"},
{"lineNum":"  325","line":"extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  326","line":"_mm_mullo_epi32 (__m128i __X, __m128i __Y)"},
{"lineNum":"  327","line":"{"},
{"lineNum":"  328","line":"  return (__m128i) ((__v4su)__X * (__v4su)__Y);"},
{"lineNum":"  329","line":"}"},
{"lineNum":"  330","line":""},
{"lineNum":"  331","line":"/* Packed integer 32-bit multiplication of 2 pairs of operands"},
{"lineNum":"  332","line":"   with two 64-bit results.  */"},
{"lineNum":"  333","line":"extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  334","line":"_mm_mul_epi32 (__m128i __X, __m128i __Y)"},
{"lineNum":"  335","line":"{"},
{"lineNum":"  336","line":"  return (__m128i) __builtin_ia32_pmuldq128 ((__v4si)__X, (__v4si)__Y);"},
{"lineNum":"  337","line":"}"},
{"lineNum":"  338","line":""},
{"lineNum":"  339","line":"/* Insert single precision float into packed single precision array"},
{"lineNum":"  340","line":"   element selected by index N.  The bits [7-6] of N define S"},
{"lineNum":"  341","line":"   index, the bits [5-4] define D index, and bits [3-0] define"},
{"lineNum":"  342","line":"   zeroing mask for D.  */"},
{"lineNum":"  343","line":""},
{"lineNum":"  344","line":"#ifdef __OPTIMIZE__"},
{"lineNum":"  345","line":"extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  346","line":"_mm_insert_ps (__m128 __D, __m128 __S, const int __N)"},
{"lineNum":"  347","line":"{"},
{"lineNum":"  348","line":"  return (__m128) __builtin_ia32_insertps128 ((__v4sf)__D,"},
{"lineNum":"  349","line":"\t\t\t\t\t      (__v4sf)__S,"},
{"lineNum":"  350","line":"\t\t\t\t\t      __N);"},
{"lineNum":"  351","line":"}"},
{"lineNum":"  352","line":"#else"},
{"lineNum":"  353","line":"#define _mm_insert_ps(D, S, N)\t\t\t\t\t\t\\"},
{"lineNum":"  354","line":"  ((__m128) __builtin_ia32_insertps128 ((__v4sf)(__m128)(D),\t\t\\"},
{"lineNum":"  355","line":"\t\t\t\t\t(__v4sf)(__m128)(S), (int)(N)))"},
{"lineNum":"  356","line":"#endif"},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"/* Helper macro to create the N value for _mm_insert_ps.  */"},
{"lineNum":"  359","line":"#define _MM_MK_INSERTPS_NDX(S, D, M) (((S) << 6) | ((D) << 4) | (M))"},
{"lineNum":"  360","line":""},
{"lineNum":"  361","line":"/* Extract binary representation of single precision float from packed"},
{"lineNum":"  362","line":"   single precision array element of X selected by index N.  */"},
{"lineNum":"  363","line":""},
{"lineNum":"  364","line":"#ifdef __OPTIMIZE__"},
{"lineNum":"  365","line":"extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  366","line":"_mm_extract_ps (__m128 __X, const int __N)"},
{"lineNum":"  367","line":"{"},
{"lineNum":"  368","line":"  union { int i; float f; } __tmp;"},
{"lineNum":"  369","line":"  __tmp.f = __builtin_ia32_vec_ext_v4sf ((__v4sf)__X, __N);"},
{"lineNum":"  370","line":"  return __tmp.i;"},
{"lineNum":"  371","line":"}"},
{"lineNum":"  372","line":"#else"},
{"lineNum":"  373","line":"#define _mm_extract_ps(X, N)\t\t\t\t\t\t\\"},
{"lineNum":"  374","line":"  (__extension__\t\t\t\t\t\t\t\\"},
{"lineNum":"  375","line":"   ({\t\t\t\t\t\t\t\t\t\\"},
{"lineNum":"  376","line":"     union { int i; float f; } __tmp;\t\t\t\t\t\\"},
{"lineNum":"  377","line":"     __tmp.f = __builtin_ia32_vec_ext_v4sf ((__v4sf)(__m128)(X), (int)(N)); \\"},
{"lineNum":"  378","line":"     __tmp.i;\t\t\t\t\t\t\t\t\\"},
{"lineNum":"  379","line":"   }))"},
{"lineNum":"  380","line":"#endif"},
{"lineNum":"  381","line":""},
{"lineNum":"  382","line":"/* Extract binary representation of single precision float into"},
{"lineNum":"  383","line":"   D from packed single precision array element of S selected"},
{"lineNum":"  384","line":"   by index N.  */"},
{"lineNum":"  385","line":"#define _MM_EXTRACT_FLOAT(D, S, N) \\"},
{"lineNum":"  386","line":"  { (D) = __builtin_ia32_vec_ext_v4sf ((__v4sf)(S), (N)); }"},
{"lineNum":"  387","line":""},
{"lineNum":"  388","line":"/* Extract specified single precision float element into the lower"},
{"lineNum":"  389","line":"   part of __m128.  */"},
{"lineNum":"  390","line":"#define _MM_PICK_OUT_PS(X, N)\t\t\t\t\\"},
{"lineNum":"  391","line":"  _mm_insert_ps (_mm_setzero_ps (), (X), \t\t\\"},
{"lineNum":"  392","line":"\t\t _MM_MK_INSERTPS_NDX ((N), 0, 0x0e))"},
{"lineNum":"  393","line":""},
{"lineNum":"  394","line":"/* Insert integer, S, into packed integer array element of D"},
{"lineNum":"  395","line":"   selected by index N.  */"},
{"lineNum":"  396","line":""},
{"lineNum":"  397","line":"#ifdef __OPTIMIZE__"},
{"lineNum":"  398","line":"extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  399","line":"_mm_insert_epi8 (__m128i __D, int __S, const int __N)"},
{"lineNum":"  400","line":"{"},
{"lineNum":"  401","line":"  return (__m128i) __builtin_ia32_vec_set_v16qi ((__v16qi)__D,"},
{"lineNum":"  402","line":"\t\t\t\t\t\t __S, __N);"},
{"lineNum":"  403","line":"}"},
{"lineNum":"  404","line":""},
{"lineNum":"  405","line":"extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  406","line":"_mm_insert_epi32 (__m128i __D, int __S, const int __N)"},
{"lineNum":"  407","line":"{"},
{"lineNum":"  408","line":"  return (__m128i) __builtin_ia32_vec_set_v4si ((__v4si)__D,"},
{"lineNum":"  409","line":"\t\t\t\t\t\t __S, __N);"},
{"lineNum":"  410","line":"}"},
{"lineNum":"  411","line":""},
{"lineNum":"  412","line":"#ifdef __x86_64__"},
{"lineNum":"  413","line":"extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  414","line":"_mm_insert_epi64 (__m128i __D, long long __S, const int __N)"},
{"lineNum":"  415","line":"{"},
{"lineNum":"  416","line":"  return (__m128i) __builtin_ia32_vec_set_v2di ((__v2di)__D,"},
{"lineNum":"  417","line":"\t\t\t\t\t\t __S, __N);"},
{"lineNum":"  418","line":"}"},
{"lineNum":"  419","line":"#endif"},
{"lineNum":"  420","line":"#else"},
{"lineNum":"  421","line":"#define _mm_insert_epi8(D, S, N)\t\t\t\t\t\\"},
{"lineNum":"  422","line":"  ((__m128i) __builtin_ia32_vec_set_v16qi ((__v16qi)(__m128i)(D),\t\\"},
{"lineNum":"  423","line":"\t\t\t\t\t   (int)(S), (int)(N)))"},
{"lineNum":"  424","line":""},
{"lineNum":"  425","line":"#define _mm_insert_epi32(D, S, N)\t\t\t\t\\"},
{"lineNum":"  426","line":"  ((__m128i) __builtin_ia32_vec_set_v4si ((__v4si)(__m128i)(D),\t\\"},
{"lineNum":"  427","line":"\t\t\t\t\t  (int)(S), (int)(N)))"},
{"lineNum":"  428","line":""},
{"lineNum":"  429","line":"#ifdef __x86_64__"},
{"lineNum":"  430","line":"#define _mm_insert_epi64(D, S, N)\t\t\t\t\t\\"},
{"lineNum":"  431","line":"  ((__m128i) __builtin_ia32_vec_set_v2di ((__v2di)(__m128i)(D),\t\t\\"},
{"lineNum":"  432","line":"\t\t\t\t\t  (long long)(S), (int)(N)))"},
{"lineNum":"  433","line":"#endif"},
{"lineNum":"  434","line":"#endif"},
{"lineNum":"  435","line":""},
{"lineNum":"  436","line":"/* Extract integer from packed integer array element of X selected by"},
{"lineNum":"  437","line":"   index N.  */"},
{"lineNum":"  438","line":""},
{"lineNum":"  439","line":"#ifdef __OPTIMIZE__"},
{"lineNum":"  440","line":"extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  441","line":"_mm_extract_epi8 (__m128i __X, const int __N)"},
{"lineNum":"  442","line":"{"},
{"lineNum":"  443","line":"   return (unsigned char) __builtin_ia32_vec_ext_v16qi ((__v16qi)__X, __N);"},
{"lineNum":"  444","line":"}"},
{"lineNum":"  445","line":""},
{"lineNum":"  446","line":"extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  447","line":"_mm_extract_epi32 (__m128i __X, const int __N)"},
{"lineNum":"  448","line":"{"},
{"lineNum":"  449","line":"   return __builtin_ia32_vec_ext_v4si ((__v4si)__X, __N);"},
{"lineNum":"  450","line":"}"},
{"lineNum":"  451","line":""},
{"lineNum":"  452","line":"#ifdef __x86_64__"},
{"lineNum":"  453","line":"extern __inline long long  __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  454","line":"_mm_extract_epi64 (__m128i __X, const int __N)"},
{"lineNum":"  455","line":"{"},
{"lineNum":"  456","line":"  return __builtin_ia32_vec_ext_v2di ((__v2di)__X, __N);"},
{"lineNum":"  457","line":"}"},
{"lineNum":"  458","line":"#endif"},
{"lineNum":"  459","line":"#else"},
{"lineNum":"  460","line":"#define _mm_extract_epi8(X, N) \\"},
{"lineNum":"  461","line":"  ((int) (unsigned char) __builtin_ia32_vec_ext_v16qi ((__v16qi)(__m128i)(X), (int)(N)))"},
{"lineNum":"  462","line":"#define _mm_extract_epi32(X, N) \\"},
{"lineNum":"  463","line":"  ((int) __builtin_ia32_vec_ext_v4si ((__v4si)(__m128i)(X), (int)(N)))"},
{"lineNum":"  464","line":""},
{"lineNum":"  465","line":"#ifdef __x86_64__"},
{"lineNum":"  466","line":"#define _mm_extract_epi64(X, N) \\"},
{"lineNum":"  467","line":"  ((long long) __builtin_ia32_vec_ext_v2di ((__v2di)(__m128i)(X), (int)(N)))"},
{"lineNum":"  468","line":"#endif"},
{"lineNum":"  469","line":"#endif"},
{"lineNum":"  470","line":""},
{"lineNum":"  471","line":"/* Return horizontal packed word minimum and its index in bits [15:0]"},
{"lineNum":"  472","line":"   and bits [18:16] respectively.  */"},
{"lineNum":"  473","line":"extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  474","line":"_mm_minpos_epu16 (__m128i __X)"},
{"lineNum":"  475","line":"{"},
{"lineNum":"  476","line":"  return (__m128i) __builtin_ia32_phminposuw128 ((__v8hi)__X);"},
{"lineNum":"  477","line":"}"},
{"lineNum":"  478","line":""},
{"lineNum":"  479","line":"/* Packed integer sign-extension.  */"},
{"lineNum":"  480","line":""},
{"lineNum":"  481","line":"extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  482","line":"_mm_cvtepi8_epi32 (__m128i __X)"},
{"lineNum":"  483","line":"{"},
{"lineNum":"  484","line":"  return (__m128i) __builtin_ia32_pmovsxbd128 ((__v16qi)__X);"},
{"lineNum":"  485","line":"}"},
{"lineNum":"  486","line":""},
{"lineNum":"  487","line":"extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  488","line":"_mm_cvtepi16_epi32 (__m128i __X)"},
{"lineNum":"  489","line":"{"},
{"lineNum":"  490","line":"  return (__m128i) __builtin_ia32_pmovsxwd128 ((__v8hi)__X);"},
{"lineNum":"  491","line":"}"},
{"lineNum":"  492","line":""},
{"lineNum":"  493","line":"extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  494","line":"_mm_cvtepi8_epi64 (__m128i __X)"},
{"lineNum":"  495","line":"{"},
{"lineNum":"  496","line":"  return (__m128i) __builtin_ia32_pmovsxbq128 ((__v16qi)__X);"},
{"lineNum":"  497","line":"}"},
{"lineNum":"  498","line":""},
{"lineNum":"  499","line":"extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  500","line":"_mm_cvtepi32_epi64 (__m128i __X)"},
{"lineNum":"  501","line":"{"},
{"lineNum":"  502","line":"  return (__m128i) __builtin_ia32_pmovsxdq128 ((__v4si)__X);"},
{"lineNum":"  503","line":"}"},
{"lineNum":"  504","line":""},
{"lineNum":"  505","line":"extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  506","line":"_mm_cvtepi16_epi64 (__m128i __X)"},
{"lineNum":"  507","line":"{"},
{"lineNum":"  508","line":"  return (__m128i) __builtin_ia32_pmovsxwq128 ((__v8hi)__X);"},
{"lineNum":"  509","line":"}"},
{"lineNum":"  510","line":""},
{"lineNum":"  511","line":"extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  512","line":"_mm_cvtepi8_epi16 (__m128i __X)"},
{"lineNum":"  513","line":"{"},
{"lineNum":"  514","line":"  return (__m128i) __builtin_ia32_pmovsxbw128 ((__v16qi)__X);"},
{"lineNum":"  515","line":"}"},
{"lineNum":"  516","line":""},
{"lineNum":"  517","line":"/* Packed integer zero-extension. */"},
{"lineNum":"  518","line":""},
{"lineNum":"  519","line":"extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  520","line":"_mm_cvtepu8_epi32 (__m128i __X)"},
{"lineNum":"  521","line":"{"},
{"lineNum":"  522","line":"  return (__m128i) __builtin_ia32_pmovzxbd128 ((__v16qi)__X);"},
{"lineNum":"  523","line":"}"},
{"lineNum":"  524","line":""},
{"lineNum":"  525","line":"extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  526","line":"_mm_cvtepu16_epi32 (__m128i __X)"},
{"lineNum":"  527","line":"{"},
{"lineNum":"  528","line":"  return (__m128i) __builtin_ia32_pmovzxwd128 ((__v8hi)__X);"},
{"lineNum":"  529","line":"}"},
{"lineNum":"  530","line":""},
{"lineNum":"  531","line":"extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  532","line":"_mm_cvtepu8_epi64 (__m128i __X)"},
{"lineNum":"  533","line":"{"},
{"lineNum":"  534","line":"  return (__m128i) __builtin_ia32_pmovzxbq128 ((__v16qi)__X);"},
{"lineNum":"  535","line":"}"},
{"lineNum":"  536","line":""},
{"lineNum":"  537","line":"extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  538","line":"_mm_cvtepu32_epi64 (__m128i __X)"},
{"lineNum":"  539","line":"{"},
{"lineNum":"  540","line":"  return (__m128i) __builtin_ia32_pmovzxdq128 ((__v4si)__X);"},
{"lineNum":"  541","line":"}"},
{"lineNum":"  542","line":""},
{"lineNum":"  543","line":"extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  544","line":"_mm_cvtepu16_epi64 (__m128i __X)"},
{"lineNum":"  545","line":"{"},
{"lineNum":"  546","line":"  return (__m128i) __builtin_ia32_pmovzxwq128 ((__v8hi)__X);"},
{"lineNum":"  547","line":"}"},
{"lineNum":"  548","line":""},
{"lineNum":"  549","line":"extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  550","line":"_mm_cvtepu8_epi16 (__m128i __X)"},
{"lineNum":"  551","line":"{"},
{"lineNum":"  552","line":"  return (__m128i) __builtin_ia32_pmovzxbw128 ((__v16qi)__X);"},
{"lineNum":"  553","line":"}"},
{"lineNum":"  554","line":""},
{"lineNum":"  555","line":"/* Pack 8 double words from 2 operands into 8 words of result with"},
{"lineNum":"  556","line":"   unsigned saturation. */"},
{"lineNum":"  557","line":"extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  558","line":"_mm_packus_epi32 (__m128i __X, __m128i __Y)"},
{"lineNum":"  559","line":"{"},
{"lineNum":"  560","line":"  return (__m128i) __builtin_ia32_packusdw128 ((__v4si)__X, (__v4si)__Y);"},
{"lineNum":"  561","line":"}"},
{"lineNum":"  562","line":""},
{"lineNum":"  563","line":"/* Sum absolute 8-bit integer difference of adjacent groups of 4"},
{"lineNum":"  564","line":"   byte integers in the first 2 operands.  Starting offsets within"},
{"lineNum":"  565","line":"   operands are determined by the 3rd mask operand.  */"},
{"lineNum":"  566","line":""},
{"lineNum":"  567","line":"#ifdef __OPTIMIZE__"},
{"lineNum":"  568","line":"extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  569","line":"_mm_mpsadbw_epu8 (__m128i __X, __m128i __Y, const int __M)"},
{"lineNum":"  570","line":"{"},
{"lineNum":"  571","line":"  return (__m128i) __builtin_ia32_mpsadbw128 ((__v16qi)__X,"},
{"lineNum":"  572","line":"\t\t\t\t\t      (__v16qi)__Y, __M);"},
{"lineNum":"  573","line":"}"},
{"lineNum":"  574","line":"#else"},
{"lineNum":"  575","line":"#define _mm_mpsadbw_epu8(X, Y, M)\t\t\t\t\t\\"},
{"lineNum":"  576","line":"  ((__m128i) __builtin_ia32_mpsadbw128 ((__v16qi)(__m128i)(X),\t\t\\"},
{"lineNum":"  577","line":"\t\t\t\t\t(__v16qi)(__m128i)(Y), (int)(M)))"},
{"lineNum":"  578","line":"#endif"},
{"lineNum":"  579","line":""},
{"lineNum":"  580","line":"/* Load double quadword using non-temporal aligned hint.  */"},
{"lineNum":"  581","line":"extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  582","line":"_mm_stream_load_si128 (__m128i *__X)"},
{"lineNum":"  583","line":"{"},
{"lineNum":"  584","line":"  return (__m128i) __builtin_ia32_movntdqa ((__v2di *) __X);"},
{"lineNum":"  585","line":"}"},
{"lineNum":"  586","line":""},
{"lineNum":"  587","line":"#ifndef __SSE4_2__"},
{"lineNum":"  588","line":"#pragma GCC push_options"},
{"lineNum":"  589","line":"#pragma GCC target(\"sse4.2\")"},
{"lineNum":"  590","line":"#define __DISABLE_SSE4_2__"},
{"lineNum":"  591","line":"#endif /* __SSE4_2__ */"},
{"lineNum":"  592","line":""},
{"lineNum":"  593","line":"/* These macros specify the source data format.  */"},
{"lineNum":"  594","line":"#define _SIDD_UBYTE_OPS\t\t\t0x00"},
{"lineNum":"  595","line":"#define _SIDD_UWORD_OPS\t\t\t0x01"},
{"lineNum":"  596","line":"#define _SIDD_SBYTE_OPS\t\t\t0x02"},
{"lineNum":"  597","line":"#define _SIDD_SWORD_OPS\t\t\t0x03"},
{"lineNum":"  598","line":""},
{"lineNum":"  599","line":"/* These macros specify the comparison operation.  */"},
{"lineNum":"  600","line":"#define _SIDD_CMP_EQUAL_ANY\t\t0x00"},
{"lineNum":"  601","line":"#define _SIDD_CMP_RANGES\t\t0x04"},
{"lineNum":"  602","line":"#define _SIDD_CMP_EQUAL_EACH\t\t0x08"},
{"lineNum":"  603","line":"#define _SIDD_CMP_EQUAL_ORDERED\t\t0x0c"},
{"lineNum":"  604","line":""},
{"lineNum":"  605","line":"/* These macros specify the polarity.  */"},
{"lineNum":"  606","line":"#define _SIDD_POSITIVE_POLARITY\t\t0x00"},
{"lineNum":"  607","line":"#define _SIDD_NEGATIVE_POLARITY\t\t0x10"},
{"lineNum":"  608","line":"#define _SIDD_MASKED_POSITIVE_POLARITY\t0x20"},
{"lineNum":"  609","line":"#define _SIDD_MASKED_NEGATIVE_POLARITY\t0x30"},
{"lineNum":"  610","line":""},
{"lineNum":"  611","line":"/* These macros specify the output selection in _mm_cmpXstri ().  */"},
{"lineNum":"  612","line":"#define _SIDD_LEAST_SIGNIFICANT\t\t0x00"},
{"lineNum":"  613","line":"#define _SIDD_MOST_SIGNIFICANT\t\t0x40"},
{"lineNum":"  614","line":""},
{"lineNum":"  615","line":"/* These macros specify the output selection in _mm_cmpXstrm ().  */"},
{"lineNum":"  616","line":"#define _SIDD_BIT_MASK\t\t\t0x00"},
{"lineNum":"  617","line":"#define _SIDD_UNIT_MASK\t\t\t0x40"},
{"lineNum":"  618","line":""},
{"lineNum":"  619","line":"/* Intrinsics for text/string processing.  */"},
{"lineNum":"  620","line":""},
{"lineNum":"  621","line":"#ifdef __OPTIMIZE__"},
{"lineNum":"  622","line":"extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  623","line":"_mm_cmpistrm (__m128i __X, __m128i __Y, const int __M)"},
{"lineNum":"  624","line":"{"},
{"lineNum":"  625","line":"  return (__m128i) __builtin_ia32_pcmpistrm128 ((__v16qi)__X,"},
{"lineNum":"  626","line":"\t\t\t\t\t\t(__v16qi)__Y,"},
{"lineNum":"  627","line":"\t\t\t\t\t\t__M);"},
{"lineNum":"  628","line":"}"},
{"lineNum":"  629","line":""},
{"lineNum":"  630","line":"extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  631","line":"_mm_cmpistri (__m128i __X, __m128i __Y, const int __M)"},
{"lineNum":"  632","line":"{"},
{"lineNum":"  633","line":"  return __builtin_ia32_pcmpistri128 ((__v16qi)__X,","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":"  634","line":"\t\t\t\t      (__v16qi)__Y,"},
{"lineNum":"  635","line":"\t\t\t\t      __M);"},
{"lineNum":"  636","line":"}"},
{"lineNum":"  637","line":""},
{"lineNum":"  638","line":"extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  639","line":"_mm_cmpestrm (__m128i __X, int __LX, __m128i __Y, int __LY, const int __M)"},
{"lineNum":"  640","line":"{"},
{"lineNum":"  641","line":"  return (__m128i) __builtin_ia32_pcmpestrm128 ((__v16qi)__X, __LX,"},
{"lineNum":"  642","line":"\t\t\t\t\t\t(__v16qi)__Y, __LY,"},
{"lineNum":"  643","line":"\t\t\t\t\t\t__M);"},
{"lineNum":"  644","line":"}"},
{"lineNum":"  645","line":""},
{"lineNum":"  646","line":"extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  647","line":"_mm_cmpestri (__m128i __X, int __LX, __m128i __Y, int __LY, const int __M)"},
{"lineNum":"  648","line":"{"},
{"lineNum":"  649","line":"  return __builtin_ia32_pcmpestri128 ((__v16qi)__X, __LX,"},
{"lineNum":"  650","line":"\t\t\t\t      (__v16qi)__Y, __LY,"},
{"lineNum":"  651","line":"\t\t\t\t      __M);"},
{"lineNum":"  652","line":"}"},
{"lineNum":"  653","line":"#else"},
{"lineNum":"  654","line":"#define _mm_cmpistrm(X, Y, M)\t\t\t\t\t\t\\"},
{"lineNum":"  655","line":"  ((__m128i) __builtin_ia32_pcmpistrm128 ((__v16qi)(__m128i)(X),\t\\"},
{"lineNum":"  656","line":"\t\t\t\t\t  (__v16qi)(__m128i)(Y), (int)(M)))"},
{"lineNum":"  657","line":"#define _mm_cmpistri(X, Y, M)\t\t\t\t\t\t\\"},
{"lineNum":"  658","line":"  ((int) __builtin_ia32_pcmpistri128 ((__v16qi)(__m128i)(X),\t\t\\"},
{"lineNum":"  659","line":"\t\t\t\t      (__v16qi)(__m128i)(Y), (int)(M)))"},
{"lineNum":"  660","line":""},
{"lineNum":"  661","line":"#define _mm_cmpestrm(X, LX, Y, LY, M)\t\t\t\t\t\\"},
{"lineNum":"  662","line":"  ((__m128i) __builtin_ia32_pcmpestrm128 ((__v16qi)(__m128i)(X),\t\\"},
{"lineNum":"  663","line":"\t\t\t\t\t  (int)(LX), (__v16qi)(__m128i)(Y), \\"},
{"lineNum":"  664","line":"\t\t\t\t\t  (int)(LY), (int)(M)))"},
{"lineNum":"  665","line":"#define _mm_cmpestri(X, LX, Y, LY, M)\t\t\t\t\t\\"},
{"lineNum":"  666","line":"  ((int) __builtin_ia32_pcmpestri128 ((__v16qi)(__m128i)(X), (int)(LX),\t\\"},
{"lineNum":"  667","line":"\t\t\t\t      (__v16qi)(__m128i)(Y), (int)(LY),\t\\"},
{"lineNum":"  668","line":"\t\t\t\t      (int)(M)))"},
{"lineNum":"  669","line":"#endif"},
{"lineNum":"  670","line":""},
{"lineNum":"  671","line":"/* Intrinsics for text/string processing and reading values of"},
{"lineNum":"  672","line":"   EFlags.  */"},
{"lineNum":"  673","line":""},
{"lineNum":"  674","line":"#ifdef __OPTIMIZE__"},
{"lineNum":"  675","line":"extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  676","line":"_mm_cmpistra (__m128i __X, __m128i __Y, const int __M)"},
{"lineNum":"  677","line":"{"},
{"lineNum":"  678","line":"  return __builtin_ia32_pcmpistria128 ((__v16qi)__X,"},
{"lineNum":"  679","line":"\t\t\t\t       (__v16qi)__Y,"},
{"lineNum":"  680","line":"\t\t\t\t       __M);"},
{"lineNum":"  681","line":"}"},
{"lineNum":"  682","line":""},
{"lineNum":"  683","line":"extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  684","line":"_mm_cmpistrc (__m128i __X, __m128i __Y, const int __M)"},
{"lineNum":"  685","line":"{"},
{"lineNum":"  686","line":"  return __builtin_ia32_pcmpistric128 ((__v16qi)__X,","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  687","line":"\t\t\t\t       (__v16qi)__Y,"},
{"lineNum":"  688","line":"\t\t\t\t       __M);"},
{"lineNum":"  689","line":"}"},
{"lineNum":"  690","line":""},
{"lineNum":"  691","line":"extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  692","line":"_mm_cmpistro (__m128i __X, __m128i __Y, const int __M)"},
{"lineNum":"  693","line":"{"},
{"lineNum":"  694","line":"  return __builtin_ia32_pcmpistrio128 ((__v16qi)__X,"},
{"lineNum":"  695","line":"\t\t\t\t       (__v16qi)__Y,"},
{"lineNum":"  696","line":"\t\t\t\t       __M);"},
{"lineNum":"  697","line":"}"},
{"lineNum":"  698","line":""},
{"lineNum":"  699","line":"extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  700","line":"_mm_cmpistrs (__m128i __X, __m128i __Y, const int __M)"},
{"lineNum":"  701","line":"{"},
{"lineNum":"  702","line":"  return __builtin_ia32_pcmpistris128 ((__v16qi)__X,"},
{"lineNum":"  703","line":"\t\t\t\t       (__v16qi)__Y,"},
{"lineNum":"  704","line":"\t\t\t\t       __M);"},
{"lineNum":"  705","line":"}"},
{"lineNum":"  706","line":""},
{"lineNum":"  707","line":"extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  708","line":"_mm_cmpistrz (__m128i __X, __m128i __Y, const int __M)"},
{"lineNum":"  709","line":"{"},
{"lineNum":"  710","line":"  return __builtin_ia32_pcmpistriz128 ((__v16qi)__X,","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  711","line":"\t\t\t\t       (__v16qi)__Y,"},
{"lineNum":"  712","line":"\t\t\t\t       __M);"},
{"lineNum":"  713","line":"}"},
{"lineNum":"  714","line":""},
{"lineNum":"  715","line":"extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  716","line":"_mm_cmpestra (__m128i __X, int __LX, __m128i __Y, int __LY, const int __M)"},
{"lineNum":"  717","line":"{"},
{"lineNum":"  718","line":"  return __builtin_ia32_pcmpestria128 ((__v16qi)__X, __LX,"},
{"lineNum":"  719","line":"\t\t\t\t       (__v16qi)__Y, __LY,"},
{"lineNum":"  720","line":"\t\t\t\t       __M);"},
{"lineNum":"  721","line":"}"},
{"lineNum":"  722","line":""},
{"lineNum":"  723","line":"extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  724","line":"_mm_cmpestrc (__m128i __X, int __LX, __m128i __Y, int __LY, const int __M)"},
{"lineNum":"  725","line":"{"},
{"lineNum":"  726","line":"  return __builtin_ia32_pcmpestric128 ((__v16qi)__X, __LX,"},
{"lineNum":"  727","line":"\t\t\t\t       (__v16qi)__Y, __LY,"},
{"lineNum":"  728","line":"\t\t\t\t       __M);"},
{"lineNum":"  729","line":"}"},
{"lineNum":"  730","line":""},
{"lineNum":"  731","line":"extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  732","line":"_mm_cmpestro (__m128i __X, int __LX, __m128i __Y, int __LY, const int __M)"},
{"lineNum":"  733","line":"{"},
{"lineNum":"  734","line":"  return __builtin_ia32_pcmpestrio128 ((__v16qi)__X, __LX,"},
{"lineNum":"  735","line":"\t\t\t\t       (__v16qi)__Y, __LY,"},
{"lineNum":"  736","line":"\t\t\t\t       __M);"},
{"lineNum":"  737","line":"}"},
{"lineNum":"  738","line":""},
{"lineNum":"  739","line":"extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  740","line":"_mm_cmpestrs (__m128i __X, int __LX, __m128i __Y, int __LY, const int __M)"},
{"lineNum":"  741","line":"{"},
{"lineNum":"  742","line":"  return __builtin_ia32_pcmpestris128 ((__v16qi)__X, __LX,"},
{"lineNum":"  743","line":"\t\t\t\t       (__v16qi)__Y, __LY,"},
{"lineNum":"  744","line":"\t\t\t\t       __M);"},
{"lineNum":"  745","line":"}"},
{"lineNum":"  746","line":""},
{"lineNum":"  747","line":"extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  748","line":"_mm_cmpestrz (__m128i __X, int __LX, __m128i __Y, int __LY, const int __M)"},
{"lineNum":"  749","line":"{"},
{"lineNum":"  750","line":"  return __builtin_ia32_pcmpestriz128 ((__v16qi)__X, __LX,"},
{"lineNum":"  751","line":"\t\t\t\t       (__v16qi)__Y, __LY,"},
{"lineNum":"  752","line":"\t\t\t\t       __M);"},
{"lineNum":"  753","line":"}"},
{"lineNum":"  754","line":"#else"},
{"lineNum":"  755","line":"#define _mm_cmpistra(X, Y, M)\t\t\t\t\t\t\\"},
{"lineNum":"  756","line":"  ((int) __builtin_ia32_pcmpistria128 ((__v16qi)(__m128i)(X),\t\t\\"},
{"lineNum":"  757","line":"\t\t\t\t       (__v16qi)(__m128i)(Y), (int)(M)))"},
{"lineNum":"  758","line":"#define _mm_cmpistrc(X, Y, M)\t\t\t\t\t\t\\"},
{"lineNum":"  759","line":"  ((int) __builtin_ia32_pcmpistric128 ((__v16qi)(__m128i)(X),\t\t\\"},
{"lineNum":"  760","line":"\t\t\t\t       (__v16qi)(__m128i)(Y), (int)(M)))"},
{"lineNum":"  761","line":"#define _mm_cmpistro(X, Y, M)\t\t\t\t\t\t\\"},
{"lineNum":"  762","line":"  ((int) __builtin_ia32_pcmpistrio128 ((__v16qi)(__m128i)(X),\t\t\\"},
{"lineNum":"  763","line":"\t\t\t\t       (__v16qi)(__m128i)(Y), (int)(M)))"},
{"lineNum":"  764","line":"#define _mm_cmpistrs(X, Y, M)\t\t\t\t\t\t\\"},
{"lineNum":"  765","line":"  ((int) __builtin_ia32_pcmpistris128 ((__v16qi)(__m128i)(X),\t\t\\"},
{"lineNum":"  766","line":"\t\t\t\t       (__v16qi)(__m128i)(Y), (int)(M)))"},
{"lineNum":"  767","line":"#define _mm_cmpistrz(X, Y, M)\t\t\t\t\t\t\\"},
{"lineNum":"  768","line":"  ((int) __builtin_ia32_pcmpistriz128 ((__v16qi)(__m128i)(X),\t\t\\"},
{"lineNum":"  769","line":"\t\t\t\t       (__v16qi)(__m128i)(Y), (int)(M)))"},
{"lineNum":"  770","line":""},
{"lineNum":"  771","line":"#define _mm_cmpestra(X, LX, Y, LY, M)\t\t\t\t\t\\"},
{"lineNum":"  772","line":"  ((int) __builtin_ia32_pcmpestria128 ((__v16qi)(__m128i)(X), (int)(LX), \\"},
{"lineNum":"  773","line":"\t\t\t\t       (__v16qi)(__m128i)(Y), (int)(LY), \\"},
{"lineNum":"  774","line":"\t\t\t\t       (int)(M)))"},
{"lineNum":"  775","line":"#define _mm_cmpestrc(X, LX, Y, LY, M)\t\t\t\t\t\\"},
{"lineNum":"  776","line":"  ((int) __builtin_ia32_pcmpestric128 ((__v16qi)(__m128i)(X), (int)(LX), \\"},
{"lineNum":"  777","line":"\t\t\t\t       (__v16qi)(__m128i)(Y), (int)(LY), \\"},
{"lineNum":"  778","line":"\t\t\t\t       (int)(M)))"},
{"lineNum":"  779","line":"#define _mm_cmpestro(X, LX, Y, LY, M)\t\t\t\t\t\\"},
{"lineNum":"  780","line":"  ((int) __builtin_ia32_pcmpestrio128 ((__v16qi)(__m128i)(X), (int)(LX), \\"},
{"lineNum":"  781","line":"\t\t\t\t       (__v16qi)(__m128i)(Y), (int)(LY), \\"},
{"lineNum":"  782","line":"\t\t\t\t       (int)(M)))"},
{"lineNum":"  783","line":"#define _mm_cmpestrs(X, LX, Y, LY, M)\t\t\t\t\t\\"},
{"lineNum":"  784","line":"  ((int) __builtin_ia32_pcmpestris128 ((__v16qi)(__m128i)(X), (int)(LX), \\"},
{"lineNum":"  785","line":"\t\t\t\t       (__v16qi)(__m128i)(Y), (int)(LY), \\"},
{"lineNum":"  786","line":"\t\t\t\t       (int)(M)))"},
{"lineNum":"  787","line":"#define _mm_cmpestrz(X, LX, Y, LY, M)\t\t\t\t\t\\"},
{"lineNum":"  788","line":"  ((int) __builtin_ia32_pcmpestriz128 ((__v16qi)(__m128i)(X), (int)(LX), \\"},
{"lineNum":"  789","line":"\t\t\t\t       (__v16qi)(__m128i)(Y), (int)(LY), \\"},
{"lineNum":"  790","line":"\t\t\t\t       (int)(M)))"},
{"lineNum":"  791","line":"#endif"},
{"lineNum":"  792","line":""},
{"lineNum":"  793","line":"/* Packed integer 64-bit comparison, zeroing or filling with ones"},
{"lineNum":"  794","line":"   corresponding parts of result.  */"},
{"lineNum":"  795","line":"extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  796","line":"_mm_cmpgt_epi64 (__m128i __X, __m128i __Y)"},
{"lineNum":"  797","line":"{"},
{"lineNum":"  798","line":"  return (__m128i) ((__v2di)__X > (__v2di)__Y);"},
{"lineNum":"  799","line":"}"},
{"lineNum":"  800","line":""},
{"lineNum":"  801","line":"#ifdef __DISABLE_SSE4_2__"},
{"lineNum":"  802","line":"#undef __DISABLE_SSE4_2__"},
{"lineNum":"  803","line":"#pragma GCC pop_options"},
{"lineNum":"  804","line":"#endif /* __DISABLE_SSE4_2__ */"},
{"lineNum":"  805","line":""},
{"lineNum":"  806","line":"#ifdef __DISABLE_SSE4_1__"},
{"lineNum":"  807","line":"#undef __DISABLE_SSE4_1__"},
{"lineNum":"  808","line":"#pragma GCC pop_options"},
{"lineNum":"  809","line":"#endif /* __DISABLE_SSE4_1__ */"},
{"lineNum":"  810","line":""},
{"lineNum":"  811","line":"#include <popcntintrin.h>"},
{"lineNum":"  812","line":""},
{"lineNum":"  813","line":"#ifndef __SSE4_1__"},
{"lineNum":"  814","line":"#pragma GCC push_options"},
{"lineNum":"  815","line":"#pragma GCC target(\"sse4.1\")"},
{"lineNum":"  816","line":"#define __DISABLE_SSE4_1__"},
{"lineNum":"  817","line":"#endif /* __SSE4_1__ */"},
{"lineNum":"  818","line":""},
{"lineNum":"  819","line":"#ifndef __SSE4_2__"},
{"lineNum":"  820","line":"#pragma GCC push_options"},
{"lineNum":"  821","line":"#pragma GCC target(\"sse4.2\")"},
{"lineNum":"  822","line":"#define __DISABLE_SSE4_2__"},
{"lineNum":"  823","line":"#endif /* __SSE4_1__ */"},
{"lineNum":"  824","line":""},
{"lineNum":"  825","line":"/* Accumulate CRC32 (polynomial 0x11EDC6F41) value.  */"},
{"lineNum":"  826","line":"extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  827","line":"_mm_crc32_u8 (unsigned int __C, unsigned char __V)"},
{"lineNum":"  828","line":"{"},
{"lineNum":"  829","line":"  return __builtin_ia32_crc32qi (__C, __V);"},
{"lineNum":"  830","line":"}"},
{"lineNum":"  831","line":""},
{"lineNum":"  832","line":"extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  833","line":"_mm_crc32_u16 (unsigned int __C, unsigned short __V)"},
{"lineNum":"  834","line":"{"},
{"lineNum":"  835","line":"  return __builtin_ia32_crc32hi (__C, __V);"},
{"lineNum":"  836","line":"}"},
{"lineNum":"  837","line":""},
{"lineNum":"  838","line":"extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  839","line":"_mm_crc32_u32 (unsigned int __C, unsigned int __V)"},
{"lineNum":"  840","line":"{"},
{"lineNum":"  841","line":"  return __builtin_ia32_crc32si (__C, __V);"},
{"lineNum":"  842","line":"}"},
{"lineNum":"  843","line":""},
{"lineNum":"  844","line":"#ifdef __x86_64__"},
{"lineNum":"  845","line":"extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))"},
{"lineNum":"  846","line":"_mm_crc32_u64 (unsigned long long __C, unsigned long long __V)"},
{"lineNum":"  847","line":"{"},
{"lineNum":"  848","line":"  return __builtin_ia32_crc32di (__C, __V);"},
{"lineNum":"  849","line":"}"},
{"lineNum":"  850","line":"#endif"},
{"lineNum":"  851","line":""},
{"lineNum":"  852","line":"#ifdef __DISABLE_SSE4_2__"},
{"lineNum":"  853","line":"#undef __DISABLE_SSE4_2__"},
{"lineNum":"  854","line":"#pragma GCC pop_options"},
{"lineNum":"  855","line":"#endif /* __DISABLE_SSE4_2__ */"},
{"lineNum":"  856","line":""},
{"lineNum":"  857","line":"#ifdef __DISABLE_SSE4_1__"},
{"lineNum":"  858","line":"#undef __DISABLE_SSE4_1__"},
{"lineNum":"  859","line":"#pragma GCC pop_options"},
{"lineNum":"  860","line":"#endif /* __DISABLE_SSE4_1__ */"},
{"lineNum":"  861","line":""},
{"lineNum":"  862","line":"#endif /* _SMMINTRIN_H_INCLUDED */"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "calculator-7c92e8220fa75aae", "date" : "2019-02-24 19:28:00", "instrumented" : 3, "covered" : 0,};
var merged_data = [];
